/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { Component, ElementRef, Input, Output, EventEmitter } from '@angular/core';
import * as Calendar from 'tui-calendar';
import { TuiCalendarDefaults } from './ngx-tui-calendar-defaults.service';
var NgxTuiCalendarComponent = /** @class */ (function () {
    function NgxTuiCalendarComponent(elm, defaults) {
        var _this = this;
        this.elm = elm;
        this.defaults = defaults;
        this.beforeCreateSchedule = new EventEmitter();
        this.beforeDeleteSchedule = new EventEmitter();
        this.afterRenderSchedule = new EventEmitter();
        this.tuiCalendarCreated = new EventEmitter();
        this.dayNameClicked = new EventEmitter();
        this.timeClicked = new EventEmitter();
        this.scheduleClicked = new EventEmitter();
        this.beforeUpdateSchedule = new EventEmitter();
        /** @type {?} */
        var options = {
            defaultView: this.defaultView,
            taskView: this.taskView,
            scheduleView: this.scheduleView,
            template: this.template,
            month: this.month,
            week: this.week
        };
        Object.keys(this.defaults).forEach(function (optionKey) {
            if (typeof options[optionKey] === 'undefined') {
                options[optionKey] = _this.defaults[optionKey];
            }
        });
        Object.keys(options).forEach(function (optionKey) {
            if (typeof options[optionKey] === 'undefined') {
                delete options[optionKey];
            }
        });
        this.tuiCalendar = new Calendar(this.elm.nativeElement, options);
        this.tuiCalendarCreated.emit({ tuiCalendar: this.tuiCalendar });
        this.tuiCalendar.on('beforeCreateSchedule', function (event) {
            if (event.triggerEventName === 'mouseup') {
                _this.timeClicked.emit(/** @type {?} */ (event.start));
            }
        });
        this.tuiCalendar.on('afterRenderSchedule', function (event) {
            _this.afterRenderSchedule.emit(event);
        });
        this.tuiCalendar.on('beforeCreateSchedule', function (event) {
            _this.beforeCreateSchedule.emit(event);
        });
        this.tuiCalendar.on('beforeDeleteSchedule', function (event) {
            _this.beforeDeleteSchedule.emit(event);
        });
        this.tuiCalendar.on('beforeUpdateSchedule', function (event) {
            _this.beforeUpdateSchedule.emit(event);
        });
        this.tuiCalendar.on('clickDayname', function (event) {
            _this.dayNameClicked.emit(event);
        });
        this.tuiCalendar.on('clickSchedule', function (event) {
            _this.scheduleClicked.emit(event);
        });
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    NgxTuiCalendarComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        if (changes["schedules"] !== undefined) {
            this.updateSchedules();
        }
    };
    /**
     * @return {?}
     */
    NgxTuiCalendarComponent.prototype.updateSchedules = /**
     * @return {?}
     */
    function () {
        this.tuiCalendar.clear();
        this.tuiCalendar.createSchedules(this.schedules, true);
        this.tuiCalendar.render();
    };
    /**
     * @param {?} offset
     * @return {?}
     */
    NgxTuiCalendarComponent.prototype.setTimeZoneOffset = /**
     * @param {?} offset
     * @return {?}
     */
    function (offset) {
        this.tuiCalendar.setTimeZoneOffset(offset);
    };
    /**
     * @param {?} offset
     * @return {?}
     */
    NgxTuiCalendarComponent.prototype.setTimeZoneOffsetCallback = /**
     * @param {?} offset
     * @return {?}
     */
    function (offset) {
        this.tuiCalendar.setTimeZoneOffset(offset);
    };
    /**
     * @param {?} view
     * @return {?}
     */
    NgxTuiCalendarComponent.prototype.changeView = /**
     * @param {?} view
     * @return {?}
     */
    function (view) {
        this.tuiCalendar.changeView(view);
    };
    /**
     * @return {?}
     */
    NgxTuiCalendarComponent.prototype.clear = /**
     * @return {?}
     */
    function () {
        this.tuiCalendar.clear();
    };
    /**
     * @param {?} schedules
     * @return {?}
     */
    NgxTuiCalendarComponent.prototype.createSchedules = /**
     * @param {?} schedules
     * @return {?}
     */
    function (schedules) {
        this.tuiCalendar.createSchedules(schedules);
    };
    /**
     * @param {?} scheduleId
     * @param {?} calendarId
     * @param {?} silent
     * @return {?}
     */
    NgxTuiCalendarComponent.prototype.deleteSchedule = /**
     * @param {?} scheduleId
     * @param {?} calendarId
     * @param {?} silent
     * @return {?}
     */
    function (scheduleId, calendarId, silent) {
        this.tuiCalendar.deleteSchedule(scheduleId, calendarId, silent);
    };
    /**
     * @return {?}
     */
    NgxTuiCalendarComponent.prototype.destroy = /**
     * @return {?}
     */
    function () {
        this.tuiCalendar.destroy();
    };
    /**
     * @return {?}
     */
    NgxTuiCalendarComponent.prototype.getDate = /**
     * @return {?}
     */
    function () {
        this.tuiCalendar.getDate();
    };
    /**
     * @return {?}
     */
    NgxTuiCalendarComponent.prototype.getDateRangeEnd = /**
     * @return {?}
     */
    function () {
        this.tuiCalendar.getDateRangeEnd();
    };
    /**
     * @return {?}
     */
    NgxTuiCalendarComponent.prototype.getDateRangeStart = /**
     * @return {?}
     */
    function () {
        this.tuiCalendar.getDateRangeStart();
    };
    /**
     * @param {?} scheduleId
     * @param {?} calendarId
     * @return {?}
     */
    NgxTuiCalendarComponent.prototype.getElement = /**
     * @param {?} scheduleId
     * @param {?} calendarId
     * @return {?}
     */
    function (scheduleId, calendarId) {
        this.tuiCalendar.getElement(scheduleId, calendarId);
    };
    /**
     * @return {?}
     */
    NgxTuiCalendarComponent.prototype.getOptions = /**
     * @return {?}
     */
    function () {
        /** @type {?} */ (this.tuiCalendar.getOptions());
    };
    /**
     * @param {?} scheduleId
     * @param {?} calendarId
     * @return {?}
     */
    NgxTuiCalendarComponent.prototype.getSchedule = /**
     * @param {?} scheduleId
     * @param {?} calendarId
     * @return {?}
     */
    function (scheduleId, calendarId) {
        this.tuiCalendar.getSchedule(scheduleId, calendarId);
    };
    /**
     * @return {?}
     */
    NgxTuiCalendarComponent.prototype.getViewName = /**
     * @return {?}
     */
    function () {
        this.tuiCalendar.getViewName();
    };
    /**
     * @return {?}
     */
    NgxTuiCalendarComponent.prototype.hideMoreView = /**
     * @return {?}
     */
    function () {
        this.tuiCalendar.hideMoreView();
    };
    /**
     * @return {?}
     */
    NgxTuiCalendarComponent.prototype.next = /**
     * @return {?}
     */
    function () {
        this.tuiCalendar.next();
    };
    /**
     * @return {?}
     */
    NgxTuiCalendarComponent.prototype.prev = /**
     * @return {?}
     */
    function () {
        this.tuiCalendar.prev();
    };
    /**
     * @param {?} schedule
     * @return {?}
     */
    NgxTuiCalendarComponent.prototype.openCreationPopup = /**
     * @param {?} schedule
     * @return {?}
     */
    function (schedule) {
        this.tuiCalendar.openCreationPopup(schedule);
    };
    /**
     * @return {?}
     */
    NgxTuiCalendarComponent.prototype.render = /**
     * @return {?}
     */
    function () {
        this.tuiCalendar.render();
    };
    /**
     * @return {?}
     */
    NgxTuiCalendarComponent.prototype.scrollToNow = /**
     * @return {?}
     */
    function () {
        this.tuiCalendar.scrollToNow();
    };
    /**
     * @param {?} calendarId
     * @param {?} option
     * @param {?} silent
     * @return {?}
     */
    NgxTuiCalendarComponent.prototype.setCalendarColor = /**
     * @param {?} calendarId
     * @param {?} option
     * @param {?} silent
     * @return {?}
     */
    function (calendarId, option, silent) {
        this.tuiCalendar.setCalendarColor(calendarId, option, silent);
    };
    /**
     * @param {?} calendars
     * @return {?}
     */
    NgxTuiCalendarComponent.prototype.setCalendars = /**
     * @param {?} calendars
     * @return {?}
     */
    function (calendars) {
        this.tuiCalendar.setCalendars(calendars);
    };
    /**
     * @param {?} date
     * @return {?}
     */
    NgxTuiCalendarComponent.prototype.setDate = /**
     * @param {?} date
     * @return {?}
     */
    function (date) {
        this.tuiCalendar.setDate(date);
    };
    /**
     * @param {?} options
     * @param {?} silent
     * @return {?}
     */
    NgxTuiCalendarComponent.prototype.setOptions = /**
     * @param {?} options
     * @param {?} silent
     * @return {?}
     */
    function (options, silent) {
        this.tuiCalendar.setOptions(options, silent);
    };
    /**
     * @param {?} theme
     * @return {?}
     */
    NgxTuiCalendarComponent.prototype.setTheme = /**
     * @param {?} theme
     * @return {?}
     */
    function (theme) {
        this.tuiCalendar.setTheme(theme);
    };
    /**
     * @return {?}
     */
    NgxTuiCalendarComponent.prototype.today = /**
     * @return {?}
     */
    function () {
        this.tuiCalendar.today();
    };
    /**
     * @param {?} calendarId
     * @param {?} toHide
     * @param {?} render
     * @return {?}
     */
    NgxTuiCalendarComponent.prototype.toggleSchedules = /**
     * @param {?} calendarId
     * @param {?} toHide
     * @param {?} render
     * @return {?}
     */
    function (calendarId, toHide, render) {
        this.tuiCalendar.toggleSchedules(calendarId, toHide, render);
    };
    /**
     * @param {?} scheduleId
     * @param {?} calendarId
     * @param {?} scheduleData
     * @param {?} silent
     * @return {?}
     */
    NgxTuiCalendarComponent.prototype.updateSchedule = /**
     * @param {?} scheduleId
     * @param {?} calendarId
     * @param {?} scheduleData
     * @param {?} silent
     * @return {?}
     */
    function (scheduleId, calendarId, scheduleData, silent) {
        this.tuiCalendar.updateSchedule(scheduleId, calendarId, scheduleData, silent);
    };
    NgxTuiCalendarComponent.decorators = [
        { type: Component, args: [{
                    selector: 'ngx-tui-calendar',
                    template: ''
                },] },
    ];
    /** @nocollapse */
    NgxTuiCalendarComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: TuiCalendarDefaults }
    ]; };
    NgxTuiCalendarComponent.propDecorators = {
        defaultView: [{ type: Input }],
        taskView: [{ type: Input }],
        scheduleView: [{ type: Input }],
        template: [{ type: Input }],
        month: [{ type: Input }],
        week: [{ type: Input }],
        schedules: [{ type: Input }],
        beforeCreateSchedule: [{ type: Output }],
        beforeDeleteSchedule: [{ type: Output }],
        afterRenderSchedule: [{ type: Output }],
        tuiCalendarCreated: [{ type: Output }],
        dayNameClicked: [{ type: Output }],
        timeClicked: [{ type: Output }],
        scheduleClicked: [{ type: Output }],
        beforeUpdateSchedule: [{ type: Output }]
    };
    return NgxTuiCalendarComponent;
}());
export { NgxTuiCalendarComponent };
if (false) {
    /** @type {?} */
    NgxTuiCalendarComponent.prototype.defaultView;
    /** @type {?} */
    NgxTuiCalendarComponent.prototype.taskView;
    /** @type {?} */
    NgxTuiCalendarComponent.prototype.scheduleView;
    /** @type {?} */
    NgxTuiCalendarComponent.prototype.template;
    /** @type {?} */
    NgxTuiCalendarComponent.prototype.month;
    /** @type {?} */
    NgxTuiCalendarComponent.prototype.week;
    /** @type {?} */
    NgxTuiCalendarComponent.prototype.schedules;
    /** @type {?} */
    NgxTuiCalendarComponent.prototype.beforeCreateSchedule;
    /** @type {?} */
    NgxTuiCalendarComponent.prototype.beforeDeleteSchedule;
    /** @type {?} */
    NgxTuiCalendarComponent.prototype.afterRenderSchedule;
    /** @type {?} */
    NgxTuiCalendarComponent.prototype.tuiCalendarCreated;
    /** @type {?} */
    NgxTuiCalendarComponent.prototype.dayNameClicked;
    /** @type {?} */
    NgxTuiCalendarComponent.prototype.timeClicked;
    /** @type {?} */
    NgxTuiCalendarComponent.prototype.scheduleClicked;
    /** @type {?} */
    NgxTuiCalendarComponent.prototype.beforeUpdateSchedule;
    /** @type {?} */
    NgxTuiCalendarComponent.prototype.tuiCalendar;
    /** @type {?} */
    NgxTuiCalendarComponent.prototype.elm;
    /** @type {?} */
    NgxTuiCalendarComponent.prototype.defaults;
}

//# sourceMappingURL=data:application/json;base64,