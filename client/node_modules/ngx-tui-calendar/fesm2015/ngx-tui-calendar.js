import { Component, ElementRef, Input, Output, EventEmitter, NgModule, InjectionToken } from '@angular/core';
import * as Calendar from 'tui-calendar';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
class TuiCalendarDefaults {
    constructor() {
        this.defaultView = 'week';
        this.taskView = false;
        this.useCreationPopup = false;
        this.useDetailPopup = false;
        this.scheduleView = true;
        this.disableDblClick = false;
        this.week = {
            daynames: ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],
            startDayOfWeek: 1,
            narrowWeekend: false,
        };
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
class NgxTuiCalendarComponent {
    /**
     * @param {?} elm
     * @param {?} defaults
     */
    constructor(elm, defaults) {
        this.elm = elm;
        this.defaults = defaults;
        this.beforeCreateSchedule = new EventEmitter();
        this.beforeDeleteSchedule = new EventEmitter();
        this.afterRenderSchedule = new EventEmitter();
        this.tuiCalendarCreated = new EventEmitter();
        this.dayNameClicked = new EventEmitter();
        this.timeClicked = new EventEmitter();
        this.scheduleClicked = new EventEmitter();
        this.beforeUpdateSchedule = new EventEmitter();
        /** @type {?} */
        const options = {
            defaultView: this.defaultView,
            taskView: this.taskView,
            scheduleView: this.scheduleView,
            template: this.template,
            month: this.month,
            week: this.week
        };
        Object.keys(this.defaults).forEach(optionKey => {
            if (typeof options[optionKey] === 'undefined') {
                options[optionKey] = this.defaults[optionKey];
            }
        });
        Object.keys(options).forEach(optionKey => {
            if (typeof options[optionKey] === 'undefined') {
                delete options[optionKey];
            }
        });
        this.tuiCalendar = new Calendar(this.elm.nativeElement, options);
        this.tuiCalendarCreated.emit({ tuiCalendar: this.tuiCalendar });
        this.tuiCalendar.on('beforeCreateSchedule', (event) => {
            if (event.triggerEventName === 'mouseup') {
                this.timeClicked.emit(/** @type {?} */ (event.start));
            }
        });
        this.tuiCalendar.on('afterRenderSchedule', (event) => {
            this.afterRenderSchedule.emit(event);
        });
        this.tuiCalendar.on('beforeCreateSchedule', (event) => {
            this.beforeCreateSchedule.emit(event);
        });
        this.tuiCalendar.on('beforeDeleteSchedule', (event) => {
            this.beforeDeleteSchedule.emit(event);
        });
        this.tuiCalendar.on('beforeUpdateSchedule', (event) => {
            this.beforeUpdateSchedule.emit(event);
        });
        this.tuiCalendar.on('clickDayname', (event) => {
            this.dayNameClicked.emit(event);
        });
        this.tuiCalendar.on('clickSchedule', (event) => {
            this.scheduleClicked.emit(event);
        });
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (changes["schedules"] !== undefined) {
            this.updateSchedules();
        }
    }
    /**
     * @return {?}
     */
    updateSchedules() {
        this.tuiCalendar.clear();
        this.tuiCalendar.createSchedules(this.schedules, true);
        this.tuiCalendar.render();
    }
    /**
     * @param {?} offset
     * @return {?}
     */
    setTimeZoneOffset(offset) {
        this.tuiCalendar.setTimeZoneOffset(offset);
    }
    /**
     * @param {?} offset
     * @return {?}
     */
    setTimeZoneOffsetCallback(offset) {
        this.tuiCalendar.setTimeZoneOffset(offset);
    }
    /**
     * @param {?} view
     * @return {?}
     */
    changeView(view) {
        this.tuiCalendar.changeView(view);
    }
    /**
     * @return {?}
     */
    clear() {
        this.tuiCalendar.clear();
    }
    /**
     * @param {?} schedules
     * @return {?}
     */
    createSchedules(schedules) {
        this.tuiCalendar.createSchedules(schedules);
    }
    /**
     * @param {?} scheduleId
     * @param {?} calendarId
     * @param {?} silent
     * @return {?}
     */
    deleteSchedule(scheduleId, calendarId, silent) {
        this.tuiCalendar.deleteSchedule(scheduleId, calendarId, silent);
    }
    /**
     * @return {?}
     */
    destroy() {
        this.tuiCalendar.destroy();
    }
    /**
     * @return {?}
     */
    getDate() {
        this.tuiCalendar.getDate();
    }
    /**
     * @return {?}
     */
    getDateRangeEnd() {
        this.tuiCalendar.getDateRangeEnd();
    }
    /**
     * @return {?}
     */
    getDateRangeStart() {
        this.tuiCalendar.getDateRangeStart();
    }
    /**
     * @param {?} scheduleId
     * @param {?} calendarId
     * @return {?}
     */
    getElement(scheduleId, calendarId) {
        this.tuiCalendar.getElement(scheduleId, calendarId);
    }
    /**
     * @return {?}
     */
    getOptions() {
        /** @type {?} */ (this.tuiCalendar.getOptions());
    }
    /**
     * @param {?} scheduleId
     * @param {?} calendarId
     * @return {?}
     */
    getSchedule(scheduleId, calendarId) {
        this.tuiCalendar.getSchedule(scheduleId, calendarId);
    }
    /**
     * @return {?}
     */
    getViewName() {
        this.tuiCalendar.getViewName();
    }
    /**
     * @return {?}
     */
    hideMoreView() {
        this.tuiCalendar.hideMoreView();
    }
    /**
     * @return {?}
     */
    next() {
        this.tuiCalendar.next();
    }
    /**
     * @return {?}
     */
    prev() {
        this.tuiCalendar.prev();
    }
    /**
     * @param {?} schedule
     * @return {?}
     */
    openCreationPopup(schedule) {
        this.tuiCalendar.openCreationPopup(schedule);
    }
    /**
     * @return {?}
     */
    render() {
        this.tuiCalendar.render();
    }
    /**
     * @return {?}
     */
    scrollToNow() {
        this.tuiCalendar.scrollToNow();
    }
    /**
     * @param {?} calendarId
     * @param {?} option
     * @param {?} silent
     * @return {?}
     */
    setCalendarColor(calendarId, option, silent) {
        this.tuiCalendar.setCalendarColor(calendarId, option, silent);
    }
    /**
     * @param {?} calendars
     * @return {?}
     */
    setCalendars(calendars) {
        this.tuiCalendar.setCalendars(calendars);
    }
    /**
     * @param {?} date
     * @return {?}
     */
    setDate(date) {
        this.tuiCalendar.setDate(date);
    }
    /**
     * @param {?} options
     * @param {?} silent
     * @return {?}
     */
    setOptions(options, silent) {
        this.tuiCalendar.setOptions(options, silent);
    }
    /**
     * @param {?} theme
     * @return {?}
     */
    setTheme(theme) {
        this.tuiCalendar.setTheme(theme);
    }
    /**
     * @return {?}
     */
    today() {
        this.tuiCalendar.today();
    }
    /**
     * @param {?} calendarId
     * @param {?} toHide
     * @param {?} render
     * @return {?}
     */
    toggleSchedules(calendarId, toHide, render) {
        this.tuiCalendar.toggleSchedules(calendarId, toHide, render);
    }
    /**
     * @param {?} scheduleId
     * @param {?} calendarId
     * @param {?} scheduleData
     * @param {?} silent
     * @return {?}
     */
    updateSchedule(scheduleId, calendarId, scheduleData, silent) {
        this.tuiCalendar.updateSchedule(scheduleId, calendarId, scheduleData, silent);
    }
}
NgxTuiCalendarComponent.decorators = [
    { type: Component, args: [{
                selector: 'ngx-tui-calendar',
                template: ''
            },] },
];
/** @nocollapse */
NgxTuiCalendarComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: TuiCalendarDefaults }
];
NgxTuiCalendarComponent.propDecorators = {
    defaultView: [{ type: Input }],
    taskView: [{ type: Input }],
    scheduleView: [{ type: Input }],
    template: [{ type: Input }],
    month: [{ type: Input }],
    week: [{ type: Input }],
    schedules: [{ type: Input }],
    beforeCreateSchedule: [{ type: Output }],
    beforeDeleteSchedule: [{ type: Output }],
    afterRenderSchedule: [{ type: Output }],
    tuiCalendarCreated: [{ type: Output }],
    dayNameClicked: [{ type: Output }],
    timeClicked: [{ type: Output }],
    scheduleClicked: [{ type: Output }],
    beforeUpdateSchedule: [{ type: Output }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/** @type {?} */
const USER_DEFAULTS = new InjectionToken('tuiCalendar defaults');
/**
 * @param {?} userDefaults
 * @return {?}
 */
function defaultsFactory(userDefaults) {
    /** @type {?} */
    const defaults = new TuiCalendarDefaults();
    Object.assign(defaults, userDefaults);
    return defaults;
}
class NgxTuiCalendarModule {
    /**
     * @param {?=} userDefaults
     * @return {?}
     */
    static forRoot(userDefaults = {}) {
        return {
            ngModule: NgxTuiCalendarModule,
            providers: [
                {
                    provide: USER_DEFAULTS,
                    useValue: userDefaults
                },
                {
                    provide: TuiCalendarDefaults,
                    useFactory: defaultsFactory,
                    deps: [USER_DEFAULTS]
                }
            ]
        };
    }
}
NgxTuiCalendarModule.decorators = [
    { type: NgModule, args: [{
                declarations: [NgxTuiCalendarComponent],
                exports: [NgxTuiCalendarComponent],
                providers: [{ provide: TuiCalendarDefaults, useClass: TuiCalendarDefaults }]
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */

export { TuiCalendarDefaults, NgxTuiCalendarComponent, USER_DEFAULTS, defaultsFactory, NgxTuiCalendarModule };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,