(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('tui-calendar')) :
    typeof define === 'function' && define.amd ? define('ngx-tui-calendar', ['exports', '@angular/core', 'tui-calendar'], factory) :
    (factory((global['ngx-tui-calendar'] = {}),global.ng.core,null));
}(this, (function (exports,core,Calendar) { 'use strict';

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var TuiCalendarDefaults = (function () {
        function TuiCalendarDefaults() {
            this.defaultView = 'week';
            this.taskView = false;
            this.useCreationPopup = false;
            this.useDetailPopup = false;
            this.scheduleView = true;
            this.disableDblClick = false;
            this.week = {
                daynames: ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],
                startDayOfWeek: 1,
                narrowWeekend: false,
            };
        }
        return TuiCalendarDefaults;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var NgxTuiCalendarComponent = (function () {
        function NgxTuiCalendarComponent(elm, defaults) {
            var _this = this;
            this.elm = elm;
            this.defaults = defaults;
            this.beforeCreateSchedule = new core.EventEmitter();
            this.beforeDeleteSchedule = new core.EventEmitter();
            this.afterRenderSchedule = new core.EventEmitter();
            this.tuiCalendarCreated = new core.EventEmitter();
            this.dayNameClicked = new core.EventEmitter();
            this.timeClicked = new core.EventEmitter();
            this.scheduleClicked = new core.EventEmitter();
            this.beforeUpdateSchedule = new core.EventEmitter();
            /** @type {?} */
            var options = {
                defaultView: this.defaultView,
                taskView: this.taskView,
                scheduleView: this.scheduleView,
                template: this.template,
                month: this.month,
                week: this.week
            };
            Object.keys(this.defaults).forEach(function (optionKey) {
                if (typeof options[optionKey] === 'undefined') {
                    options[optionKey] = _this.defaults[optionKey];
                }
            });
            Object.keys(options).forEach(function (optionKey) {
                if (typeof options[optionKey] === 'undefined') {
                    delete options[optionKey];
                }
            });
            this.tuiCalendar = new Calendar(this.elm.nativeElement, options);
            this.tuiCalendarCreated.emit({ tuiCalendar: this.tuiCalendar });
            this.tuiCalendar.on('beforeCreateSchedule', function (event) {
                if (event.triggerEventName === 'mouseup') {
                    _this.timeClicked.emit(/** @type {?} */ (event.start));
                }
            });
            this.tuiCalendar.on('afterRenderSchedule', function (event) {
                _this.afterRenderSchedule.emit(event);
            });
            this.tuiCalendar.on('beforeCreateSchedule', function (event) {
                _this.beforeCreateSchedule.emit(event);
            });
            this.tuiCalendar.on('beforeDeleteSchedule', function (event) {
                _this.beforeDeleteSchedule.emit(event);
            });
            this.tuiCalendar.on('beforeUpdateSchedule', function (event) {
                _this.beforeUpdateSchedule.emit(event);
            });
            this.tuiCalendar.on('clickDayname', function (event) {
                _this.dayNameClicked.emit(event);
            });
            this.tuiCalendar.on('clickSchedule', function (event) {
                _this.scheduleClicked.emit(event);
            });
        }
        /**
         * @param {?} changes
         * @return {?}
         */
        NgxTuiCalendarComponent.prototype.ngOnChanges = /**
         * @param {?} changes
         * @return {?}
         */
            function (changes) {
                if (changes["schedules"] !== undefined) {
                    this.updateSchedules();
                }
            };
        /**
         * @return {?}
         */
        NgxTuiCalendarComponent.prototype.updateSchedules = /**
         * @return {?}
         */
            function () {
                this.tuiCalendar.clear();
                this.tuiCalendar.createSchedules(this.schedules, true);
                this.tuiCalendar.render();
            };
        /**
         * @param {?} offset
         * @return {?}
         */
        NgxTuiCalendarComponent.prototype.setTimeZoneOffset = /**
         * @param {?} offset
         * @return {?}
         */
            function (offset) {
                this.tuiCalendar.setTimeZoneOffset(offset);
            };
        /**
         * @param {?} offset
         * @return {?}
         */
        NgxTuiCalendarComponent.prototype.setTimeZoneOffsetCallback = /**
         * @param {?} offset
         * @return {?}
         */
            function (offset) {
                this.tuiCalendar.setTimeZoneOffset(offset);
            };
        /**
         * @param {?} view
         * @return {?}
         */
        NgxTuiCalendarComponent.prototype.changeView = /**
         * @param {?} view
         * @return {?}
         */
            function (view) {
                this.tuiCalendar.changeView(view);
            };
        /**
         * @return {?}
         */
        NgxTuiCalendarComponent.prototype.clear = /**
         * @return {?}
         */
            function () {
                this.tuiCalendar.clear();
            };
        /**
         * @param {?} schedules
         * @return {?}
         */
        NgxTuiCalendarComponent.prototype.createSchedules = /**
         * @param {?} schedules
         * @return {?}
         */
            function (schedules) {
                this.tuiCalendar.createSchedules(schedules);
            };
        /**
         * @param {?} scheduleId
         * @param {?} calendarId
         * @param {?} silent
         * @return {?}
         */
        NgxTuiCalendarComponent.prototype.deleteSchedule = /**
         * @param {?} scheduleId
         * @param {?} calendarId
         * @param {?} silent
         * @return {?}
         */
            function (scheduleId, calendarId, silent) {
                this.tuiCalendar.deleteSchedule(scheduleId, calendarId, silent);
            };
        /**
         * @return {?}
         */
        NgxTuiCalendarComponent.prototype.destroy = /**
         * @return {?}
         */
            function () {
                this.tuiCalendar.destroy();
            };
        /**
         * @return {?}
         */
        NgxTuiCalendarComponent.prototype.getDate = /**
         * @return {?}
         */
            function () {
                this.tuiCalendar.getDate();
            };
        /**
         * @return {?}
         */
        NgxTuiCalendarComponent.prototype.getDateRangeEnd = /**
         * @return {?}
         */
            function () {
                this.tuiCalendar.getDateRangeEnd();
            };
        /**
         * @return {?}
         */
        NgxTuiCalendarComponent.prototype.getDateRangeStart = /**
         * @return {?}
         */
            function () {
                this.tuiCalendar.getDateRangeStart();
            };
        /**
         * @param {?} scheduleId
         * @param {?} calendarId
         * @return {?}
         */
        NgxTuiCalendarComponent.prototype.getElement = /**
         * @param {?} scheduleId
         * @param {?} calendarId
         * @return {?}
         */
            function (scheduleId, calendarId) {
                this.tuiCalendar.getElement(scheduleId, calendarId);
            };
        /**
         * @return {?}
         */
        NgxTuiCalendarComponent.prototype.getOptions = /**
         * @return {?}
         */
            function () {
                /** @type {?} */ (this.tuiCalendar.getOptions());
            };
        /**
         * @param {?} scheduleId
         * @param {?} calendarId
         * @return {?}
         */
        NgxTuiCalendarComponent.prototype.getSchedule = /**
         * @param {?} scheduleId
         * @param {?} calendarId
         * @return {?}
         */
            function (scheduleId, calendarId) {
                this.tuiCalendar.getSchedule(scheduleId, calendarId);
            };
        /**
         * @return {?}
         */
        NgxTuiCalendarComponent.prototype.getViewName = /**
         * @return {?}
         */
            function () {
                this.tuiCalendar.getViewName();
            };
        /**
         * @return {?}
         */
        NgxTuiCalendarComponent.prototype.hideMoreView = /**
         * @return {?}
         */
            function () {
                this.tuiCalendar.hideMoreView();
            };
        /**
         * @return {?}
         */
        NgxTuiCalendarComponent.prototype.next = /**
         * @return {?}
         */
            function () {
                this.tuiCalendar.next();
            };
        /**
         * @return {?}
         */
        NgxTuiCalendarComponent.prototype.prev = /**
         * @return {?}
         */
            function () {
                this.tuiCalendar.prev();
            };
        /**
         * @param {?} schedule
         * @return {?}
         */
        NgxTuiCalendarComponent.prototype.openCreationPopup = /**
         * @param {?} schedule
         * @return {?}
         */
            function (schedule) {
                this.tuiCalendar.openCreationPopup(schedule);
            };
        /**
         * @return {?}
         */
        NgxTuiCalendarComponent.prototype.render = /**
         * @return {?}
         */
            function () {
                this.tuiCalendar.render();
            };
        /**
         * @return {?}
         */
        NgxTuiCalendarComponent.prototype.scrollToNow = /**
         * @return {?}
         */
            function () {
                this.tuiCalendar.scrollToNow();
            };
        /**
         * @param {?} calendarId
         * @param {?} option
         * @param {?} silent
         * @return {?}
         */
        NgxTuiCalendarComponent.prototype.setCalendarColor = /**
         * @param {?} calendarId
         * @param {?} option
         * @param {?} silent
         * @return {?}
         */
            function (calendarId, option, silent) {
                this.tuiCalendar.setCalendarColor(calendarId, option, silent);
            };
        /**
         * @param {?} calendars
         * @return {?}
         */
        NgxTuiCalendarComponent.prototype.setCalendars = /**
         * @param {?} calendars
         * @return {?}
         */
            function (calendars) {
                this.tuiCalendar.setCalendars(calendars);
            };
        /**
         * @param {?} date
         * @return {?}
         */
        NgxTuiCalendarComponent.prototype.setDate = /**
         * @param {?} date
         * @return {?}
         */
            function (date) {
                this.tuiCalendar.setDate(date);
            };
        /**
         * @param {?} options
         * @param {?} silent
         * @return {?}
         */
        NgxTuiCalendarComponent.prototype.setOptions = /**
         * @param {?} options
         * @param {?} silent
         * @return {?}
         */
            function (options, silent) {
                this.tuiCalendar.setOptions(options, silent);
            };
        /**
         * @param {?} theme
         * @return {?}
         */
        NgxTuiCalendarComponent.prototype.setTheme = /**
         * @param {?} theme
         * @return {?}
         */
            function (theme) {
                this.tuiCalendar.setTheme(theme);
            };
        /**
         * @return {?}
         */
        NgxTuiCalendarComponent.prototype.today = /**
         * @return {?}
         */
            function () {
                this.tuiCalendar.today();
            };
        /**
         * @param {?} calendarId
         * @param {?} toHide
         * @param {?} render
         * @return {?}
         */
        NgxTuiCalendarComponent.prototype.toggleSchedules = /**
         * @param {?} calendarId
         * @param {?} toHide
         * @param {?} render
         * @return {?}
         */
            function (calendarId, toHide, render) {
                this.tuiCalendar.toggleSchedules(calendarId, toHide, render);
            };
        /**
         * @param {?} scheduleId
         * @param {?} calendarId
         * @param {?} scheduleData
         * @param {?} silent
         * @return {?}
         */
        NgxTuiCalendarComponent.prototype.updateSchedule = /**
         * @param {?} scheduleId
         * @param {?} calendarId
         * @param {?} scheduleData
         * @param {?} silent
         * @return {?}
         */
            function (scheduleId, calendarId, scheduleData, silent) {
                this.tuiCalendar.updateSchedule(scheduleId, calendarId, scheduleData, silent);
            };
        NgxTuiCalendarComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'ngx-tui-calendar',
                        template: ''
                    },] },
        ];
        /** @nocollapse */
        NgxTuiCalendarComponent.ctorParameters = function () {
            return [
                { type: core.ElementRef },
                { type: TuiCalendarDefaults }
            ];
        };
        NgxTuiCalendarComponent.propDecorators = {
            defaultView: [{ type: core.Input }],
            taskView: [{ type: core.Input }],
            scheduleView: [{ type: core.Input }],
            template: [{ type: core.Input }],
            month: [{ type: core.Input }],
            week: [{ type: core.Input }],
            schedules: [{ type: core.Input }],
            beforeCreateSchedule: [{ type: core.Output }],
            beforeDeleteSchedule: [{ type: core.Output }],
            afterRenderSchedule: [{ type: core.Output }],
            tuiCalendarCreated: [{ type: core.Output }],
            dayNameClicked: [{ type: core.Output }],
            timeClicked: [{ type: core.Output }],
            scheduleClicked: [{ type: core.Output }],
            beforeUpdateSchedule: [{ type: core.Output }]
        };
        return NgxTuiCalendarComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    /** @type {?} */
    var USER_DEFAULTS = new core.InjectionToken('tuiCalendar defaults');
    /**
     * @param {?} userDefaults
     * @return {?}
     */
    function defaultsFactory(userDefaults) {
        /** @type {?} */
        var defaults = new TuiCalendarDefaults();
        Object.assign(defaults, userDefaults);
        return defaults;
    }
    var NgxTuiCalendarModule = (function () {
        function NgxTuiCalendarModule() {
        }
        /**
         * @param {?=} userDefaults
         * @return {?}
         */
        NgxTuiCalendarModule.forRoot = /**
         * @param {?=} userDefaults
         * @return {?}
         */
            function (userDefaults) {
                if (userDefaults === void 0) {
                    userDefaults = {};
                }
                return {
                    ngModule: NgxTuiCalendarModule,
                    providers: [
                        {
                            provide: USER_DEFAULTS,
                            useValue: userDefaults
                        },
                        {
                            provide: TuiCalendarDefaults,
                            useFactory: defaultsFactory,
                            deps: [USER_DEFAULTS]
                        }
                    ]
                };
            };
        NgxTuiCalendarModule.decorators = [
            { type: core.NgModule, args: [{
                        declarations: [NgxTuiCalendarComponent],
                        exports: [NgxTuiCalendarComponent],
                        providers: [{ provide: TuiCalendarDefaults, useClass: TuiCalendarDefaults }]
                    },] },
        ];
        return NgxTuiCalendarModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */

    exports.TuiCalendarDefaults = TuiCalendarDefaults;
    exports.NgxTuiCalendarComponent = NgxTuiCalendarComponent;
    exports.USER_DEFAULTS = USER_DEFAULTS;
    exports.defaultsFactory = defaultsFactory;
    exports.NgxTuiCalendarModule = NgxTuiCalendarModule;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,