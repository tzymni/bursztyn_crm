{"version":3,"sources":["ng://ngx-tui-calendar/lib/ngx-tui-calendar-defaults.service.ts","ng://ngx-tui-calendar/lib/ngx-tui-calendar.component.ts","ng://ngx-tui-calendar/lib/ngx-tui-calendar.module.ts"],"names":["TuiCalendarDefaults","daynames","startDayOfWeek","narrowWeekend","NgxTuiCalendarComponent","elm","defaults","_this","this","EventEmitter","options","defaultView","taskView","scheduleView","template","month","week","Object","keys","forEach","optionKey","tuiCalendar","Calendar","nativeElement","tuiCalendarCreated","emit","on","event","triggerEventName","timeClicked","afterRenderSchedule","beforeCreateSchedule","beforeDeleteSchedule","beforeUpdateSchedule","dayNameClicked","scheduleClicked","prototype","ngOnChanges","changes","undefined","updateSchedules","clear","createSchedules","schedules","render","setTimeZoneOffset","offset","setTimeZoneOffsetCallback","changeView","view","deleteSchedule","scheduleId","calendarId","silent","destroy","getDate","getDateRangeEnd","getDateRangeStart","getElement","getOptions","getSchedule","getViewName","hideMoreView","next","prev","openCreationPopup","schedule","scrollToNow","setCalendarColor","option","setCalendars","calendars","setDate","date","setOptions","setTheme","theme","today","toggleSchedules","toHide","updateSchedule","scheduleData","Component","args","selector","ElementRef","Input","Output","USER_DEFAULTS","InjectionToken","defaultsFactory","userDefaults","assign","NgxTuiCalendarModule","forRoot","ngModule","providers","provide","useValue","useFactory","deps","NgModule","declarations","exports","useClass"],"mappings":"gUAcAA,gCACe,sBACH,yBACQ,uBACF,qBACD,wBACG,YAEE,CACpBC,SAAU,CAAC,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,OACrDC,eAAgB,EAChBC,eAAe,ICzBjBC,EAAA,WAiCE,SAAAA,EAAoBC,EAAyBC,GAA7C,IAAAC,EAAAC,KAAoBA,KAAAH,IAAAA,EAAyBG,KAAAF,SAAAA,4BAZ6B,IAAIG,EAAAA,uCACJ,IAAIA,EAAAA,sCACN,IAAIA,EAAAA,qCACT,IAAIA,EAAAA,iCACX,IAAIA,EAAAA,8BACpB,IAAIA,EAAAA,kCACc,IAAIA,EAAAA,uCACQ,IAAIA,EAAAA,aAO5E,IAAMC,EAA8B,CAClCC,YAAaH,KAAKG,YAClBC,SAAUJ,KAAKI,SACfC,aAAcL,KAAKK,aACnBC,SAAUN,KAAKM,SACfC,MAAOP,KAAKO,MACZC,KAAMR,KAAKQ,MAGbC,OAAOC,KAAKV,KAAKF,UAAUa,QAAQ,SAAAC,GACC,oBAAvBV,EAAQU,KACjBV,EAAQU,GAAab,EAAKD,SAASc,MAIvCH,OAAOC,KAAKR,GAASS,QAAQ,SAAAC,GACO,oBAAvBV,EAAQU,WACVV,EAAQU,KAInBZ,KAAKa,YAAc,IAAIC,EAASd,KAAKH,IAAIkB,cAAeb,GAExDF,KAAKgB,mBAAmBC,KAAK,CAAEJ,YAAab,KAAKa,cAEjDb,KAAKa,YAAYK,GAAG,uBAAwB,SAACC,GACZ,YAA3BA,EAAMC,kBACRrB,EAAKsB,YAAYJ,KAAWE,EAAW,SAI3CnB,KAAKa,YAAYK,GAAG,sBAAuB,SAACC,GAC1CpB,EAAKuB,oBAAoBL,KAAKE,KAGhCnB,KAAKa,YAAYK,GAAG,uBAAwB,SAACC,GAC3CpB,EAAKwB,qBAAqBN,KAAKE,KAGjCnB,KAAKa,YAAYK,GAAG,uBAAwB,SAACC,GAC3CpB,EAAKyB,qBAAqBP,KAAKE,KAGjCnB,KAAKa,YAAYK,GAAG,uBAAwB,SAACC,GAC3CpB,EAAK0B,qBAAqBR,KAAKE,KAGjCnB,KAAKa,YAAYK,GAAG,eAAgB,SAACC,GACnCpB,EAAK2B,eAAeT,KAAKE,KAG3BnB,KAAKa,YAAYK,GAAG,gBAAiB,SAACC,GACpCpB,EAAK4B,gBAAgBV,KAAKE,YAM9BvB,EAAAgC,UAAAC,YAAA,SAAYC,GACNA,EAAmB,YAAMC,WAC3B/B,KAAKgC,mBAIDpC,EAAAgC,UAAAI,2BACNhC,KAAKa,YAAYoB,QACjBjC,KAAKa,YAAYqB,gBAAgBlC,KAAKmC,WAAW,GACjDnC,KAAKa,YAAYuB,UAGZxC,EAAAgC,UAAAS,2BAAkBC,GACvBtC,KAAKa,YAAYwB,kBAAkBC,IAG9B1C,EAAAgC,UAAAW,mCAA0BD,GAC/BtC,KAAKa,YAAYwB,kBAAkBC,IAG9B1C,EAAAgC,UAAAY,oBAAWC,GAChBzC,KAAKa,YAAY2B,WAAWC,IAGvB7C,EAAAgC,UAAAK,iBACLjC,KAAKa,YAAYoB,SAGZrC,EAAAgC,UAAAM,yBAAgBC,GACrBnC,KAAKa,YAAYqB,gBAAgBC,IAG5BvC,EAAAgC,UAAAc,wBAAeC,EAAoBC,EAAoBC,GAC5D7C,KAAKa,YAAY6B,eAAeC,EAAYC,EAAYC,IAGnDjD,EAAAgC,UAAAkB,mBACL9C,KAAKa,YAAYiC,WAGZlD,EAAAgC,UAAAmB,mBACL/C,KAAKa,YAAYkC,WAGZnD,EAAAgC,UAAAoB,2BACLhD,KAAKa,YAAYmC,mBAGZpD,EAAAgC,UAAAqB,6BACLjD,KAAKa,YAAYoC,qBAGZrD,EAAAgC,UAAAsB,oBAAWP,EAAoBC,GACpC5C,KAAKa,YAAYqC,WAAWP,EAAYC,IAGnChD,EAAAgC,UAAAuB,sBACenD,KAAKa,YAAYsC,cAGhCvD,EAAAgC,UAAAwB,qBAAYT,EAAoBC,GACrC5C,KAAKa,YAAYuC,YAAYT,EAAYC,IAGpChD,EAAAgC,UAAAyB,uBACLrD,KAAKa,YAAYwC,eAGZzD,EAAAgC,UAAA0B,wBACLtD,KAAKa,YAAYyC,gBAGZ1D,EAAAgC,UAAA2B,gBACLvD,KAAKa,YAAY0C,QAGZ3D,EAAAgC,UAAA4B,gBACLxD,KAAKa,YAAY2C,QAGZ5D,EAAAgC,UAAA6B,2BAAkBC,GACvB1D,KAAKa,YAAY4C,kBAAkBC,IAG9B9D,EAAAgC,UAAAQ,kBACLpC,KAAKa,YAAYuB,UAGZxC,EAAAgC,UAAA+B,uBACL3D,KAAKa,YAAY8C,eAGZ/D,EAAAgC,UAAAgC,0BAAiBhB,EAAoBiB,EAAahB,GACvD7C,KAAKa,YAAY+C,iBAAiBhB,EAAYiB,EAAQhB,IAGjDjD,EAAAgC,UAAAkC,sBAAaC,GAClB/D,KAAKa,YAAYiD,aAAaC,IAGzBnE,EAAAgC,UAAAoC,iBAAQC,GACbjE,KAAKa,YAAYmD,QAAQC,IAGpBrE,EAAAgC,UAAAsC,oBAAWhE,EAA6B2C,GAC7C7C,KAAKa,YAAYqD,WAAWhE,EAAS2C,IAGhCjD,EAAAgC,UAAAuC,kBAASC,GACdpE,KAAKa,YAAYsD,SAASC,IAGrBxE,EAAAgC,UAAAyC,iBACLrE,KAAKa,YAAYwD,SAGZzE,EAAAgC,UAAA0C,yBAAgB1B,EAAoB2B,EAAiBnC,GAC1DpC,KAAKa,YAAYyD,gBAAgB1B,EAAY2B,EAAQnC,IAGhDxC,EAAAgC,UAAA4C,wBAAe7B,EAAoBC,EAAoB6B,EAAwB5B,GACpF7C,KAAKa,YAAY2D,eAAe7B,EAAYC,EAAY6B,EAAc5B,wBA/MzE6B,EAAAA,UAASC,KAAA,CAAC,CACTC,SAAU,mBACVtE,SAAU,gDATQuE,EAAAA,kBAGSrF,0CAU1BsF,EAAAA,wBACAA,EAAAA,4BACAA,EAAAA,wBACAA,EAAAA,qBACAA,EAAAA,oBACAA,EAAAA,yBACAA,EAAAA,oCAEAC,EAAAA,qCACAA,EAAAA,oCACAA,EAAAA,mCACAA,EAAAA,+BACAA,EAAAA,4BACAA,EAAAA,gCACAA,EAAAA,qCACAA,EAAAA,YA5BH,GCIaC,EAAwC,IAAIC,EAAAA,eACxD,wBAGD,SAAAC,EAAgCC,GAC/B,IAAMrF,EAAgC,IAAIN,EAE1C,OADAiB,OAAO2E,OAAOtF,EAAUqF,GACjBrF,wCASAuF,EAAAC,QAAP,SAAeH,GACd,YADc,IAAAA,IAAAA,EAAA,IACP,CACNI,SAAUF,EACVG,UAAW,CACV,CACCC,QAAST,EACTU,SAAUP,GAEX,CACCM,QAASjG,EACTmG,WAAYT,EACZU,KAAM,CAACZ,2BAlBXa,EAAAA,SAAQlB,KAAA,CAAC,CACTmB,aAAc,CAAClG,GACfmG,QAAS,CAACnG,GACV4F,UAAW,CAAC,CAAEC,QAASjG,EAAqBwG,SAAUxG","sourcesContent":["import { WeekOptions } from \"./Models/WeekOptions\";\r\nimport { MonthOptions } from \"./Models/MonthOptions\";\r\nimport { Template } from \"./Models/Template\";\r\n\r\nexport interface TuiCalendarOptions {\r\n\tdefaultView?: string;\r\n\ttaskView?: boolean;\r\n\tscheduleView?: boolean;\r\n\ttemplate?: Template;\r\n\tmonth?: MonthOptions;\r\n  week?: WeekOptions;\r\n  disableDblClick?:boolean\r\n}\r\n\r\nexport class TuiCalendarDefaults {\r\n\tdefaultView = 'week';\r\n\ttaskView = false;\r\n\tuseCreationPopup = false;\r\n\tuseDetailPopup = false;\r\n  scheduleView = true;\r\n  disableDblClick = false;\r\n\r\n  week: WeekOptions = {\r\n\t\tdaynames: ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],\r\n\t\tstartDayOfWeek: 1,\r\n\t\tnarrowWeekend: false,\r\n\t};\r\n}\r\n","import { Component, ElementRef, Input, Output, EventEmitter, AfterViewInit, OnChanges, SimpleChanges, OnInit } from '@angular/core';\r\n\r\nimport * as Calendar from 'tui-calendar';\r\nimport { TuiCalendarOptions, TuiCalendarDefaults } from './ngx-tui-calendar-defaults.service';\r\nimport { AfterRenderScheduleEvent, BeforeCreateScheduleEvent, BeforeDeleteScheduleEvent, BeforeUpdateScheduleEvent, ClickDaynameEvent, ClickScheduleEvent } from './Models/Events';\r\nimport { Schedule } from './Models/Schedule';\r\n\r\n@Component({\r\n  selector: 'ngx-tui-calendar',\r\n  template: ''\r\n})\r\nexport class NgxTuiCalendarComponent implements OnChanges, TuiCalendarOptions {\r\n\r\n  @Input() defaultView: string;\r\n  @Input() taskView: boolean;\r\n  @Input() scheduleView: boolean;\r\n  @Input() template: object;\r\n  @Input() month: object;\r\n  @Input() week: object;\r\n  @Input() schedules: Schedule[];\r\n\r\n  @Output() beforeCreateSchedule: EventEmitter<BeforeCreateScheduleEvent> = new EventEmitter();\r\n  @Output() beforeDeleteSchedule: EventEmitter<BeforeDeleteScheduleEvent> = new EventEmitter();\r\n  @Output() afterRenderSchedule: EventEmitter<AfterRenderScheduleEvent> = new EventEmitter();\r\n  @Output() tuiCalendarCreated: EventEmitter<{ tuiCalendar: any }> = new EventEmitter();\r\n  @Output() dayNameClicked: EventEmitter<ClickDaynameEvent> = new EventEmitter();\r\n  @Output() timeClicked: EventEmitter<Date> = new EventEmitter();\r\n  @Output() scheduleClicked: EventEmitter<ClickScheduleEvent> = new EventEmitter();\r\n  @Output() beforeUpdateSchedule: EventEmitter<BeforeUpdateScheduleEvent> = new EventEmitter();\r\n\r\n\r\n  private tuiCalendar: any;\r\n\r\n  constructor(private elm: ElementRef, private defaults: TuiCalendarDefaults) {\r\n\r\n    const options: TuiCalendarOptions = {\r\n      defaultView: this.defaultView,\r\n      taskView: this.taskView,\r\n      scheduleView: this.scheduleView,\r\n      template: this.template,\r\n      month: this.month,\r\n      week: this.week\r\n    };\r\n\r\n    Object.keys(this.defaults).forEach(optionKey => {\r\n      if (typeof options[optionKey] === 'undefined') {\r\n        options[optionKey] = this.defaults[optionKey];\r\n      }\r\n    });\r\n\r\n    Object.keys(options).forEach(optionKey => {\r\n      if (typeof options[optionKey] === 'undefined') {\r\n        delete options[optionKey];\r\n      }\r\n    });\r\n\r\n    this.tuiCalendar = new Calendar(this.elm.nativeElement, options);\r\n\r\n    this.tuiCalendarCreated.emit({ tuiCalendar: this.tuiCalendar });\r\n\r\n    this.tuiCalendar.on('beforeCreateSchedule', (event: BeforeCreateScheduleEvent) => {\r\n      if (event.triggerEventName === 'mouseup') {\r\n        this.timeClicked.emit(<Date>event.start);\r\n      }\r\n    });\r\n\r\n    this.tuiCalendar.on('afterRenderSchedule', (event: AfterRenderScheduleEvent) => {\r\n      this.afterRenderSchedule.emit(event);\r\n    });\r\n\r\n    this.tuiCalendar.on('beforeCreateSchedule', (event: BeforeCreateScheduleEvent) => {\r\n      this.beforeCreateSchedule.emit(event);\r\n    });\r\n\r\n    this.tuiCalendar.on('beforeDeleteSchedule', (event: BeforeDeleteScheduleEvent) => {\r\n      this.beforeDeleteSchedule.emit(event);\r\n    });\r\n\r\n    this.tuiCalendar.on('beforeUpdateSchedule', (event: BeforeUpdateScheduleEvent) => {\r\n      this.beforeUpdateSchedule.emit(event);\r\n    });\r\n\r\n    this.tuiCalendar.on('clickDayname', (event: ClickDaynameEvent) => {\r\n      this.dayNameClicked.emit(event);\r\n    });\r\n\r\n    this.tuiCalendar.on('clickSchedule', (event: ClickScheduleEvent) => {\r\n      this.scheduleClicked.emit(event);\r\n    });\r\n\r\n  }\r\n\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    if (changes[\"schedules\"] !== undefined) {\r\n      this.updateSchedules();\r\n    }\r\n  }\r\n\r\n  private updateSchedules() {\r\n    this.tuiCalendar.clear();\r\n    this.tuiCalendar.createSchedules(this.schedules, true);\r\n    this.tuiCalendar.render();\r\n  }\r\n\r\n  public setTimeZoneOffset(offset: number) {\r\n    this.tuiCalendar.setTimeZoneOffset(offset);\r\n  }\r\n\r\n  public setTimeZoneOffsetCallback(offset: void) {\r\n    this.tuiCalendar.setTimeZoneOffset(offset);\r\n  }\r\n\r\n  public changeView(view: string) {\r\n    this.tuiCalendar.changeView(view);\r\n  }\r\n\r\n  public clear() {\r\n    this.tuiCalendar.clear();\r\n  }\r\n\r\n  public createSchedules(schedules: any[]) {\r\n    this.tuiCalendar.createSchedules(schedules);\r\n  }\r\n\r\n  public deleteSchedule(scheduleId: string, calendarId: string, silent: boolean) {\r\n    this.tuiCalendar.deleteSchedule(scheduleId, calendarId, silent);\r\n  }\r\n\r\n  public destroy() {\r\n    this.tuiCalendar.destroy();\r\n  }\r\n\r\n  public getDate() {\r\n    this.tuiCalendar.getDate();\r\n  }\r\n\r\n  public getDateRangeEnd() {\r\n    this.tuiCalendar.getDateRangeEnd();\r\n  }\r\n\r\n  public getDateRangeStart() {\r\n    this.tuiCalendar.getDateRangeStart();\r\n  }\r\n\r\n  public getElement(scheduleId: string, calendarId: string) {\r\n    this.tuiCalendar.getElement(scheduleId, calendarId);\r\n  }\r\n\r\n  public getOptions() {\r\n    <TuiCalendarOptions>this.tuiCalendar.getOptions();\r\n  }\r\n\r\n  public getSchedule(scheduleId: string, calendarId: string) {\r\n    this.tuiCalendar.getSchedule(scheduleId, calendarId);\r\n  }\r\n\r\n  public getViewName() {\r\n    this.tuiCalendar.getViewName();\r\n  }\r\n\r\n  public hideMoreView() {\r\n    this.tuiCalendar.hideMoreView();\r\n  }\r\n\r\n  public next() {\r\n    this.tuiCalendar.next();\r\n  }\r\n\r\n  public prev() {\r\n    this.tuiCalendar.prev();\r\n  }\r\n\r\n  public openCreationPopup(schedule: any) {\r\n    this.tuiCalendar.openCreationPopup(schedule);\r\n  }\r\n\r\n  public render() {\r\n    this.tuiCalendar.render();\r\n  }\r\n\r\n  public scrollToNow() {\r\n    this.tuiCalendar.scrollToNow();\r\n  }\r\n\r\n  public setCalendarColor(calendarId: string, option: any, silent: boolean) {\r\n    this.tuiCalendar.setCalendarColor(calendarId, option, silent);\r\n  }\r\n\r\n  public setCalendars(calendars: any[]) {\r\n    this.tuiCalendar.setCalendars(calendars);\r\n  }\r\n\r\n  public setDate(date: Date | string) {\r\n    this.tuiCalendar.setDate(date);\r\n  }\r\n\r\n  public setOptions(options: TuiCalendarOptions, silent: boolean) {\r\n    this.tuiCalendar.setOptions(options, silent);\r\n  }\r\n\r\n  public setTheme(theme: string[]) {\r\n    this.tuiCalendar.setTheme(theme);\r\n  }\r\n\r\n  public today() {\r\n    this.tuiCalendar.today();\r\n  }\r\n\r\n  public toggleSchedules(calendarId: string, toHide: boolean, render: boolean) {\r\n    this.tuiCalendar.toggleSchedules(calendarId, toHide, render);\r\n  }\r\n\r\n  public updateSchedule(scheduleId: string, calendarId: string, scheduleData: Schedule, silent: boolean) {\r\n    this.tuiCalendar.updateSchedule(scheduleId, calendarId, scheduleData, silent);\r\n  }\r\n\r\n}\r\n","import { NgModule, InjectionToken, ModuleWithProviders } from '@angular/core';\r\nimport { NgxTuiCalendarComponent } from './ngx-tui-calendar.component';\r\nimport { TuiCalendarOptions, TuiCalendarDefaults } from './ngx-tui-calendar-defaults.service';\r\n\r\nexport const USER_DEFAULTS: InjectionToken<string> = new InjectionToken(\r\n\t'tuiCalendar defaults'\r\n);\r\n\r\nexport function defaultsFactory(userDefaults: TuiCalendarOptions): TuiCalendarOptions {\r\n\tconst defaults: TuiCalendarDefaults = new TuiCalendarDefaults();\r\n\tObject.assign(defaults, userDefaults);\r\n\treturn defaults;\r\n}\r\n@NgModule({\r\n\tdeclarations: [NgxTuiCalendarComponent],\r\n\texports: [NgxTuiCalendarComponent],\r\n\tproviders: [{ provide: TuiCalendarDefaults, useClass: TuiCalendarDefaults }]\r\n})\r\nexport class NgxTuiCalendarModule {\r\n\r\n\tstatic forRoot(userDefaults: TuiCalendarOptions = {}): ModuleWithProviders {\r\n\t\treturn {\r\n\t\t\tngModule: NgxTuiCalendarModule,\r\n\t\t\tproviders: [\r\n\t\t\t\t{\r\n\t\t\t\t\tprovide: USER_DEFAULTS,\r\n\t\t\t\t\tuseValue: userDefaults\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\tprovide: TuiCalendarDefaults,\r\n\t\t\t\t\tuseFactory: defaultsFactory,\r\n\t\t\t\t\tdeps: [USER_DEFAULTS]\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t};\r\n\t}\r\n}\r\n"]}